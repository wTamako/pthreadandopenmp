#include<iostream>
#include <windows.h>
#include<pthread.h>
#include <stdlib.h>
#include<semaphore.h>
#pragma comment(lib,"pthreadVC2.lib")
using namespace std;
float A[2000][2000], B[2000][2000], C[2000][2000], D[2000][2000];
int n;
typedef struct {
	int t_id;
}threadParam_t2;
int num_threads = 7;
sem_t sem_leader;
sem_t* sem_Division = new sem_t[num_threads - 1];
sem_t* sem_Elimination = new sem_t[num_threads - 1];
void* threadFunc2(void* param) {//静态线程+信号量同步版本
	threadParam_t2* p = (threadParam_t2*)param;

	int t_id = p->t_id; //线程编号
	for (int k = 0; k < n; k++)
	{
		if (t_id == 0) {
			float tmp = B[k][k];
			for (int j = k; j < n; j++)
				B[k][j] /= tmp;

		}
		else {
			sem_wait(&sem_Division[t_id - 1]);
		}
		if (t_id == 0) {
			for (int i = 0; i < num_threads - 1; i++)
				sem_post(&sem_Division[i]);
		}
		for (int i = k + 1 + t_id; i < n; i += num_threads)
		{
			float tmp2 = B[i][k];
			for (int j = k + 1; j < n; j++) {
				B[i][j] -= tmp2 * B[k][j];
			}
			B[i][k] = 0;
		}
		if (t_id == 0) {
			for (int i = 0; i < num_threads - 1; i++)
				sem_wait(&sem_leader);
			for (int i = 0; i < num_threads - 1; i++)
				sem_post(&sem_Elimination[i]);
		}
		else {
			sem_post(&sem_leader);
			sem_wait(&sem_Elimination[t_id - 1]);
		}
	}
	pthread_exit(NULL);
	return NULL;

}
void Initialize(int n)//初始化
{
	int i, j, k;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < i; j++) {
			A[i][j] = 0;//下三角元素初始化为零
			B[i][j] = 0;
			C[i][j] = 0;
			D[i][j] = 0;
		}
		A[i][i] = 1.0;//对角线元素初始化为1
		B[i][i] = 1.0;
		C[i][i] = 1.0;
		D[i][i] = 1.0;
		for (j = i + 1; j < n; j++) {
			A[i][j] = rand();//上三角元素初始化为随机数
			B[i][j] = A[i][j];
			C[i][j] = A[i][j];
			D[i][j] = A[i][j];
		}
	}
	for (k = 0; k < n; k++)
		for (i = k + 1; i < n; i++)
			for (j = 0; j < n; j++) {
				A[i][j] += A[k][j];//最终每一行的值是上一行的值与这一行的值之和
				B[i][j] += B[k][j];
				C[i][j] += C[k][j];
				D[i][j] += D[k][j];
			}
}
void Gauss_normal() {//串行算法
	int i, j, k;
	for (k = 0; k < n; k++)
	{
		float tmp = A[k][k];
		for (j = k; j < n; j++)
			A[k][j] /= tmp;
		for (i = k + 1; i < n; i++)\
		{
			float tmp2 = A[i][k];
			for (j = k + 1; j < n; j++)
				A[i][j] -= tmp2 * A[k][j];
			A[i][k] = 0;
		}
	}
}
void Guass_para_statistic() {
	int i;
	sem_init(&sem_leader, 0, 0);
	for (i = 0; i < num_threads - 1; i++) {
		sem_init(&sem_Division[i], 0, 0);
		sem_init(&sem_Elimination[i], 0, 0);
	}
	pthread_t* handles = new pthread_t[num_threads];//创建对应的handle
	threadParam_t2* param = new threadParam_t2[num_threads];//创建对应的线程数据结构
	for (int t_id = 0; t_id < num_threads; t_id++) {
		param[t_id].t_id = t_id;
	}
	for (int t_id = 0; t_id < num_threads; t_id++) {
		pthread_create(&handles[t_id], NULL, threadFunc2, &param[t_id]);
	}
	for (int t_id = 0; t_id < num_threads; t_id++) {
		pthread_join(handles[t_id], NULL);
	}
	sem_destroy(sem_Division);
	sem_destroy(sem_Elimination);
	sem_destroy(&sem_leader);
}

void Print(int n, float m[][2000]) {//打印结果
	int i, j;
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++)
			cout << m[i][j] << " ";
		cout << endl;
	}
}
int main() {
	int N, count, cycle = 1, step = 10;
	N = 2000;
	LARGE_INTEGER t1, t2, tc1, t3, t4, tc2;
	Initialize(2000);
	for (num_threads = 3; num_threads <= 7; num_threads++) {
		cout << "threads are " << num_threads << endl;
		step = 10;
		for (n = 10; n < N; n += step) {
			count = 1;
			cycle = 10;
				
			if (num_threads == 3) {
				QueryPerformanceFrequency(&tc1);
				QueryPerformanceCounter(&t1);
				while (count <= cycle) {
					Gauss_normal();
					count++;
				}
				QueryPerformanceCounter(&t2);
				cout << n << " " << count - 1 << " " << ((t2.QuadPart - t1.QuadPart) * 1000.0 / tc1.QuadPart);
			}

			count = 1;
			QueryPerformanceFrequency(&tc2);
			QueryPerformanceCounter(&t3);
			while (count <= cycle) {
				Guass_para_statistic();
				count++;
			}
			QueryPerformanceCounter(&t4);
			if (num_threads == 3)
				cout << " " << ((t4.QuadPart - t3.QuadPart) * 1000.0 / tc2.QuadPart) << endl;
			else
				cout << n << " " << count - 1 << " " << ((t4.QuadPart - t3.QuadPart) * 1000.0 / tc2.QuadPart) << endl;

			if (n == 100)
				step = 100;
			if (n == 1000)
				step = 500;

		}
	}
}